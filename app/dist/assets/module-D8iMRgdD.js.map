{"version":3,"mappings":";sTAEA,MAAMA,UAA4BC,CAAe,CAC/C,aAAc,CACZ,MAAK,CACP,CACA,QAAWC,GAAO,CAChB,KAAK,KAAKC,EAAmB,WAAYD,CAAE,CAC7C,CACF,CCPA,MAAME,UAA0BH,CAAe,CAC7C,aAAc,CACZ,MAAK,CACP,CACA,eAAiB,CAACI,EAAMC,IAAY,CAClC,KAAK,KAAKC,EAAa,eAAgBF,EAAMC,CAAO,CACtD,EACA,cAAgB,CAACE,EAAKH,IAAS,CAC7B,KAAK,KAAKE,EAAa,cAAeC,EAAKH,CAAI,CACjD,CACF,CCXA,MAAMI,CAAc,CAClB,QAA0B,IAAI,IAC9B,YAA8B,IAAI,IAClC,aAAc,CACZ,KAAK,QAA0B,IAAI,IAAI,CACrC,CAAC,SAASC,EAAA,IAAC,OAAO,qBAA2B,iCAAC,EAC9C,CAAC,cAAcA,EAAA,IAAC,OAAO,qBAA6B,iCAAC,EACrD,CAAC,eAAeA,EAAA,IAAC,OAAO,qBAA8B,iCAAC,EACvD,CAAC,cAAcA,EAAA,IAAC,OAAO,qBAA6B,iCAAC,EACrD,CAAC,SAASA,EAAA,IAAC,OAAO,qBAAwB,iCAAC,EAC3C,CAAC,aAAaA,EAAA,IAAC,OAAO,qBAA4B,OAAAC,KAAA,iCAAC,EACnD,CAAC,WAAWD,EAAA,IAAC,OAAO,qBAA0B,kCAAC,EAC/C,CAAC,aAAaA,EAAA,IAAC,OAAO,qBAA4B,OAAAC,KAAA,iCAAC,EACnD,CAAC,UAAUD,EAAA,IAAC,OAAO,qBAAyB,kCAAC,EAC7C,CAAC,eAAeA,EAAA,IAAC,OAAO,qBAA8B,kCAAC,EACvD,CAAC,QAAQA,EAAA,IAAC,OAAO,qBAAuB,kCAAC,EACzC,CAAC,SAASA,EAAA,IAAC,OAAO,qBAAwB,kCAAC,EAC3C,CAAC,UAAUA,EAAA,IAAC,OAAO,qBAAyB,kCAAC,EAC7C,CAAC,YAAYA,EAAA,IAAC,OAAO,qBAA2B,kCAAC,CACvD,CAAK,EACD,KAAK,YAA8B,IAAI,IAAI,CACzC,CAAC,cAAeE,CAA4C,EAC5D,CAAC,eAAgBC,CAA2C,EAC5D,CAAC,cAAeC,CAA4C,EAC5D,CAAC,SAAUC,CAAkC,EAC7C,CAAC,WAAYC,CAAsC,EACnD,CAAC,aAAcC,CAA0C,EACzD,CAAC,aAAcC,CAA0C,EACzD,CAAC,SAAUC,CAAkC,EAC7C,CAAC,UAAWC,CAAoC,EAChD,CAAC,eAAgBC,CAA8C,EAC/D,CAAC,SAAUC,CAAkC,EAC7C,CAAC,QAASC,CAAgC,EAC1C,CAAC,SAAUC,CAAkC,EAC7C,CAAC,WAAYC,CAAsC,EACnD,CAAC,UAAWC,CAAoC,EAChD,CAAC,YAAaC,CAAwC,CAC5D,CAAK,CACH,CACA,OAAOC,EAAKC,EAAO,CACjB,KAAK,QAAQ,IAAID,EAAKC,CAAK,CAC7B,CACF","names":["AuxiliaryController","BaseController","id","AuxiliaryEventKind","SidebarController","item","groupId","SidebarEvent","pos","ModuleService","__vitePreload","n","controller.activityBar.ActivityBarController","controller.auxiliaryBar.AuxiliaryController","controller.contextMenu.ContextMenuController","controller.editor.EditorController","controller.explorer.ExplorerController","controller.editorTree.EditorTreeController","controller.folderTree.FolderTreeController","controller.layout.LayoutController","controller.menuBar.MenuBarController","controller.notification.NotificationController","controller.output.OutputController","controller.panel.PanelController","controller.search.SearchController","controller.settings.SettingsController","controller.sidebar.SidebarController","controller.statusBar.StatusBarController","key","token"],"ignoreList":[],"sources":["../../../esm/controllers/auxiliaryBar.js","../../../esm/controllers/sidebar.js","../../../esm/services/module.js"],"sourcesContent":["import { BaseController } from \"../glue\";\nimport { AuxiliaryEventKind } from \"../models/auxiliaryBar\";\nclass AuxiliaryController extends BaseController {\n  constructor() {\n    super();\n  }\n  onClick = (id) => {\n    this.emit(AuxiliaryEventKind.onTabClick, id);\n  };\n}\nexport {\n  AuxiliaryController\n};\n","import { BaseController } from \"../glue\";\nimport { SidebarEvent } from \"../models/sidebar\";\nclass SidebarController extends BaseController {\n  constructor() {\n    super();\n  }\n  onToolbarClick = (item, groupId) => {\n    this.emit(SidebarEvent.onToolbarClick, item, groupId);\n  };\n  onContextMenu = (pos, item) => {\n    this.emit(SidebarEvent.onContextMenu, pos, item);\n  };\n}\nexport {\n  SidebarController\n};\n","import * as controller from \"../controllers\";\nclass ModuleService {\n  modules = /* @__PURE__ */ new Map();\n  controllers = /* @__PURE__ */ new Map();\n  constructor() {\n    this.modules = /* @__PURE__ */ new Map([\n      [\"layout\", import(\"../client/slots/workbench\")],\n      [\"activityBar\", import(\"../client/slots/activityBar\")],\n      [\"auxiliaryBar\", import(\"../client/slots/auxiliaryBar\")],\n      [\"contextMenu\", import(\"../client/slots/contextMenu\")],\n      [\"editor\", import(\"../client/slots/editor\")],\n      [\"editorTree\", import(\"../client/slots/editorTree\")],\n      [\"explorer\", import(\"../client/slots/explorer\")],\n      [\"folderTree\", import(\"../client/slots/folderTree\")],\n      [\"menuBar\", import(\"../client/slots/menuBar\")],\n      [\"notification\", import(\"../client/slots/notification\")],\n      [\"panel\", import(\"../client/slots/panel\")],\n      [\"search\", import(\"../client/slots/search\")],\n      [\"sidebar\", import(\"../client/slots/sidebar\")],\n      [\"statusBar\", import(\"../client/slots/statusBar\")]\n    ]);\n    this.controllers = /* @__PURE__ */ new Map([\n      [\"activityBar\", controller.activityBar.ActivityBarController],\n      [\"auxiliaryBar\", controller.auxiliaryBar.AuxiliaryController],\n      [\"contextMenu\", controller.contextMenu.ContextMenuController],\n      [\"editor\", controller.editor.EditorController],\n      [\"explorer\", controller.explorer.ExplorerController],\n      [\"editorTree\", controller.editorTree.EditorTreeController],\n      [\"folderTree\", controller.folderTree.FolderTreeController],\n      [\"layout\", controller.layout.LayoutController],\n      [\"menuBar\", controller.menuBar.MenuBarController],\n      [\"notification\", controller.notification.NotificationController],\n      [\"output\", controller.output.OutputController],\n      [\"panel\", controller.panel.PanelController],\n      [\"search\", controller.search.SearchController],\n      [\"settings\", controller.settings.SettingsController],\n      [\"sidebar\", controller.sidebar.SidebarController],\n      [\"statusBar\", controller.statusBar.StatusBarController]\n    ]);\n  }\n  update(key, token) {\n    this.modules.set(key, token);\n  }\n}\nexport {\n  ModuleService\n};\n"],"file":"assets/module-D8iMRgdD.js"}
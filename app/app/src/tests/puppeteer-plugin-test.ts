/**
 * Puppeteer Êèí‰ª∂Âä†ËΩΩËá™Âä®ÂåñÊµãËØï
 * Áî®‰∫éÊ£ÄÊµãÊèí‰ª∂Âä†ËΩΩÂØºËá¥È°µÈù¢Á©∫ÁôΩÁöÑÈóÆÈ¢ò
 */

import puppeteer from 'puppeteer';

export class PuppeteerPluginTest {
  private browser: puppeteer.Browser | null = null;
  private page: puppeteer.Page | null = null;

  async runPluginTest() {
    console.log('ü§ñ ÂºÄÂßãPuppeteerÊèí‰ª∂Âä†ËΩΩÊµãËØï...');
    console.log('='.repeat(50));
    
    try {
      // ÂêØÂä®ÊµèËßàÂô®
      await this.launchBrowser();
      
      // ÂàõÂª∫È°µÈù¢
      await this.createPage();
      
      // ËÆæÁΩÆÈîôËØØÁõëÂê¨
      await this.setupErrorListeners();
      
      // ÂØºËà™Âà∞Â∫îÁî®
      await this.navigateToApp();
      
      // Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩ
      await this.waitForPageLoad();
      
      // Ê£ÄÊü•È°µÈù¢Áä∂ÊÄÅ
      await this.checkPageState();
      
      // Ê£ÄÊü•Êèí‰ª∂Á≥ªÁªü
      await this.checkPluginSystem();
      
      // Ê£ÄÊü•MoleculeÊ°ÜÊû∂
      await this.checkMoleculeFramework();
      
      // Ê£ÄÊü•HelloÊèí‰ª∂
      await this.checkHelloPlugin();
      
      // ÁîüÊàêÊµãËØïÊä•Âëä
      await this.generateTestReport();
      
    } catch (error) {
      console.error('‚ùå ÊµãËØïËøáÁ®ã‰∏≠Âá∫Áé∞ÈîôËØØ:', error);
    } finally {
      // Ê∏ÖÁêÜËµÑÊ∫ê
      await this.cleanup();
    }
  }

  private async launchBrowser() {
    console.log('üöÄ ÂêØÂä®ÊµèËßàÂô®...');
    
    this.browser = await puppeteer.launch({
      headless: false, // ÊòæÁ§∫ÊµèËßàÂô®Á™óÂè£‰ª•‰æøËßÇÂØü
      devtools: true,  // ÊâìÂºÄÂºÄÂèëËÄÖÂ∑•ÂÖ∑
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--no-first-run',
        '--no-zygote',
        '--disable-gpu'
      ]
    });
    
    console.log('‚úÖ ÊµèËßàÂô®ÂêØÂä®ÊàêÂäü');
  }

  private async createPage() {
    console.log('üìÑ ÂàõÂª∫È°µÈù¢...');
    
    if (!this.browser) {
      throw new Error('ÊµèËßàÂô®Êú™ÂêØÂä®');
    }
    
    this.page = await this.browser.newPage();
    
    // ËÆæÁΩÆËßÜÂè£Â§ßÂ∞è
    await this.page.setViewport({ width: 1280, height: 720 });
    
    // ËÆæÁΩÆÁî®Êà∑‰ª£ÁêÜ
    await this.page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
    
    console.log('‚úÖ È°µÈù¢ÂàõÂª∫ÊàêÂäü');
  }

  private async setupErrorListeners() {
    console.log('üëÇ ËÆæÁΩÆÈîôËØØÁõëÂê¨...');
    
    if (!this.page) {
      throw new Error('È°µÈù¢Êú™ÂàõÂª∫');
    }
    
    // ÁõëÂê¨È°µÈù¢ÈîôËØØ
    this.page.on('error', (error) => {
      console.error('‚ùå È°µÈù¢ÈîôËØØ:', error.message);
    });
    
    // ÁõëÂê¨È°µÈù¢Â¥©Ê∫É
    this.page.on('crash', () => {
      console.error('‚ùå È°µÈù¢Â¥©Ê∫É');
    });
    
    // ÁõëÂê¨ÊéßÂà∂Âè∞Ê∂àÊÅØ
    this.page.on('console', (msg) => {
      const type = msg.type();
      const text = msg.text();
      
      if (type === 'error') {
        console.error(`‚ùå ÊéßÂà∂Âè∞ÈîôËØØ: ${text}`);
      } else if (type === 'warning') {
        console.warn(`‚ö†Ô∏è ÊéßÂà∂Âè∞Ë≠¶Âëä: ${text}`);
      } else {
        console.log(`üìù ÊéßÂà∂Âè∞Ê∂àÊÅØ [${type}]: ${text}`);
      }
    });
    
    // ÁõëÂê¨ËØ∑Ê±ÇÂ§±Ë¥•
    this.page.on('requestfailed', (request) => {
      console.error(`‚ùå ËØ∑Ê±ÇÂ§±Ë¥•: ${request.url()} - ${request.failure()?.errorText}`);
    });
    
    console.log('‚úÖ ÈîôËØØÁõëÂê¨ËÆæÁΩÆÂÆåÊàê');
  }

  private async navigateToApp() {
    console.log('üåê ÂØºËà™Âà∞Â∫îÁî®...');
    
    if (!this.page) {
      throw new Error('È°µÈù¢Êú™ÂàõÂª∫');
    }
    
    try {
      await this.page.goto('http://localhost:5173/', {
        waitUntil: 'networkidle2',
        timeout: 30000
      });
      
      console.log('‚úÖ ÊàêÂäüÂØºËà™Âà∞Â∫îÁî®');
    } catch (error) {
      console.error('‚ùå ÂØºËà™Â§±Ë¥•:', error);
      throw error;
    }
  }

  private async waitForPageLoad() {
    console.log('‚è≥ Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩ...');
    
    if (!this.page) {
      throw new Error('È°µÈù¢Êú™ÂàõÂª∫');
    }
    
    // Á≠âÂæÖÈ°µÈù¢ÂÆåÂÖ®Âä†ËΩΩ
    await this.page.waitForFunction(() => document.readyState === 'complete', {
      timeout: 10000
    });
    
    // È¢ùÂ§ñÁ≠âÂæÖ‰∏ÄÊÆµÊó∂Èó¥ËÆ©Êèí‰ª∂Á≥ªÁªüÂàùÂßãÂåñ
    await this.page.waitForTimeout(5000);
    
    console.log('‚úÖ È°µÈù¢Âä†ËΩΩÂÆåÊàê');
  }

  private async checkPageState() {
    console.log('\nüîç Ê£ÄÊü•È°µÈù¢Áä∂ÊÄÅ...');
    
    if (!this.page) {
      throw new Error('È°µÈù¢Êú™ÂàõÂª∫');
    }
    
    // Ê£ÄÊü•È°µÈù¢Ê†áÈ¢ò
    const title = await this.page.title();
    console.log(`üìä È°µÈù¢Ê†áÈ¢ò: ${title}`);
    
    // Ê£ÄÊü•È°µÈù¢URL
    const url = this.page.url();
    console.log(`üìä È°µÈù¢URL: ${url}`);
    
    // Ê£ÄÊü•Ê†πÂÖÉÁ¥†
    const rootExists = await this.page.evaluate(() => {
      const root = document.getElementById('root');
      return {
        exists: !!root,
        hasContent: root ? root.innerHTML.length > 0 : false,
        childrenCount: root ? root.children.length : 0
      };
    });
    
    console.log(`üìä RootÂÖÉÁ¥†Â≠òÂú®: ${rootExists.exists}`);
    console.log(`üìä RootÊúâÂÜÖÂÆπ: ${rootExists.hasContent}`);
    console.log(`üìä RootÂ≠êÂÖÉÁ¥†Êï∞Èáè: ${rootExists.childrenCount}`);
    
    if (!rootExists.exists) {
      console.log('‚ùå RootÂÖÉÁ¥†‰∏çÂ≠òÂú® - È°µÈù¢ÁªìÊûÑÊúâÈóÆÈ¢ò');
    } else if (!rootExists.hasContent) {
      console.log('‚ùå RootÂÖÉÁ¥†‰∏∫Á©∫ - ËøôÂèØËÉΩÊòØÈ°µÈù¢Á©∫ÁôΩÁöÑÂéüÂõ†');
    }
    
    // Ê£ÄÊü•È°µÈù¢ÊòØÂê¶Á©∫ÁôΩ
    const isPageBlank = await this.page.evaluate(() => {
      const body = document.body;
      const visibleElements = body.querySelectorAll('*:not(script):not(style):not(link)');
      return visibleElements.length <= 1; // Âè™ÊúâbodyÂÖÉÁ¥†
    });
    
    console.log(`üìä È°µÈù¢ÊòØÂê¶Á©∫ÁôΩ: ${isPageBlank}`);
    
    if (isPageBlank) {
      console.log('‚ùå È°µÈù¢Á°ÆÂÆûÁ©∫ÁôΩ - ÈúÄË¶ÅËøõ‰∏ÄÊ≠•ËØäÊñ≠');
    }
  }

  private async checkPluginSystem() {
    console.log('\nüîç Ê£ÄÊü•Êèí‰ª∂Á≥ªÁªü...');
    
    if (!this.page) {
      throw new Error('È°µÈù¢Êú™ÂàõÂª∫');
    }
    
    // Ê£ÄÊü•ÊéßÂà∂Âè∞Êó•Âøó‰∏≠ÁöÑÊèí‰ª∂Áõ∏ÂÖ≥‰ø°ÊÅØ
    const pluginLogs = await this.page.evaluate(() => {
      // ËøôÈáåÊàë‰ª¨Êó†Ê≥ïÁõ¥Êé•Ëé∑ÂèñÊéßÂà∂Âè∞Êó•ÂøóÔºå‰ΩÜÂèØ‰ª•Ê£ÄÊü•‰∏Ä‰∫õÂÖ≥ÈîÆÂÖÉÁ¥†
      const allElements = Array.from(document.querySelectorAll('*'));
      const pluginElements = allElements.filter(el => 
        el.textContent?.includes('Plugin') || 
        el.textContent?.includes('plugin') ||
        el.className?.includes('plugin') ||
        el.id?.includes('plugin')
      );
      
      return {
        pluginElementsCount: pluginElements.length,
        pluginTexts: pluginElements.map(el => el.textContent?.substring(0, 50))
      };
    });
    
    console.log(`üìä Êèí‰ª∂Áõ∏ÂÖ≥ÂÖÉÁ¥†: ${pluginLogs.pluginElementsCount} ‰∏™`);
    
    if (pluginLogs.pluginTexts.length > 0) {
      console.log('üìù Êèí‰ª∂Áõ∏ÂÖ≥ÊñáÊú¨:');
      pluginLogs.pluginTexts.forEach((text, index) => {
        console.log(`  ${index + 1}. ${text}`);
      });
    }
  }

  private async checkMoleculeFramework() {
    console.log('\nüîç Ê£ÄÊü•MoleculeÊ°ÜÊû∂...');
    
    if (!this.page) {
      throw new Error('È°µÈù¢Êú™ÂàõÂª∫');
    }
    
    // Ê£ÄÊü•MoleculeÂØπË±°
    const moleculeState = await this.page.evaluate(() => {
      const molecule = (window as any).molecule;
      if (!molecule) {
        return { exists: false, apis: {} };
      }
      
      const apis = ['activityBar', 'statusBar', 'sidebar', 'editor', 'notification'];
      const apiState: Record<string, boolean> = {};
      
      for (const api of apis) {
        try {
          apiState[api] = !!molecule[api];
        } catch (error) {
          apiState[api] = false;
        }
      }
      
      return { exists: true, apis: apiState };
    });
    
    console.log(`üìä MoleculeÂØπË±°Â≠òÂú®: ${moleculeState.exists}`);
    
    if (moleculeState.exists) {
      console.log('üìä Molecule APIÁä∂ÊÄÅ:');
      Object.entries(moleculeState.apis).forEach(([api, available]) => {
        console.log(`  - ${api}: ${available ? '‚úÖ' : '‚ùå'}`);
      });
    } else {
      console.log('‚ùå MoleculeÂØπË±°‰∏çÂ≠òÂú® - ËøôÂèØËÉΩÊòØÈ°µÈù¢Á©∫ÁôΩÁöÑ‰∏ªË¶ÅÂéüÂõ†');
    }
  }

  private async checkHelloPlugin() {
    console.log('\nüîç Ê£ÄÊü•HelloÊèí‰ª∂...');
    
    if (!this.page) {
      throw new Error('È°µÈù¢Êú™ÂàõÂª∫');
    }
    
    // Ê£ÄÊü•HelloÊèí‰ª∂ÂÖÉÁ¥†
    const helloState = await this.page.evaluate(() => {
      const allElements = Array.from(document.querySelectorAll('*'));
      
      // Êü•ÊâæÂåÖÂê´ üëã ÁöÑÂÖÉÁ¥†
      const helloElements = allElements.filter(el => 
        el.textContent?.includes('üëã') || el.innerHTML?.includes('üëã')
      );
      
      // Êü•ÊâæHello PluginÊñáÊú¨
      const helloTextElements = allElements.filter(el => 
        el.textContent?.includes('Hello Plugin')
      );
      
      // Êü•ÊâæÊ¥ªÂä®Ê†è
      const activityBarElements = allElements.filter(el => 
        el.className?.includes('activity') || 
        el.className?.includes('Activity') ||
        el.className?.includes('activityBar')
      );
      
      return {
        helloElementsCount: helloElements.length,
        helloTextElementsCount: helloTextElements.length,
        activityBarElementsCount: activityBarElements.length,
        helloTexts: helloElements.map(el => el.textContent?.substring(0, 30))
      };
    });
    
    console.log(`üìä HelloÂÖÉÁ¥†Êï∞Èáè: ${helloState.helloElementsCount}`);
    console.log(`üìä HelloÊñáÊú¨ÂÖÉÁ¥†Êï∞Èáè: ${helloState.helloTextElementsCount}`);
    console.log(`üìä Ê¥ªÂä®Ê†èÂÖÉÁ¥†Êï∞Èáè: ${helloState.activityBarElementsCount}`);
    
    if (helloState.helloTexts.length > 0) {
      console.log('üìù HelloÁõ∏ÂÖ≥ÊñáÊú¨:');
      helloState.helloTexts.forEach((text, index) => {
        console.log(`  ${index + 1}. ${text}`);
      });
    }
  }

  private async generateTestReport() {
    console.log('\nüìä PuppeteerÊèí‰ª∂ÊµãËØïÊä•Âëä');
    console.log('='.repeat(50));
    
    // Ëé∑ÂèñÊúÄÁªàÈ°µÈù¢Áä∂ÊÄÅ
    if (!this.page) {
      console.log('‚ùå È°µÈù¢Êú™ÂàõÂª∫ÔºåÊó†Ê≥ïÁîüÊàêÊä•Âëä');
      return;
    }
    
    const finalState = await this.page.evaluate(() => {
      const root = document.getElementById('root');
      const molecule = (window as any).molecule;
      const body = document.body;
      
      return {
        rootExists: !!root,
        rootHasContent: root ? root.innerHTML.length > 0 : false,
        moleculeExists: !!molecule,
        bodyChildrenCount: body.children.length,
        pageTitle: document.title,
        readyState: document.readyState
      };
    });
    
    console.log('üìä ÊúÄÁªàÈ°µÈù¢Áä∂ÊÄÅ:');
    console.log(`  - È°µÈù¢Ê†áÈ¢ò: ${finalState.pageTitle}`);
    console.log(`  - Âä†ËΩΩÁä∂ÊÄÅ: ${finalState.readyState}`);
    console.log(`  - RootÂÖÉÁ¥†Â≠òÂú®: ${finalState.rootExists}`);
    console.log(`  - RootÊúâÂÜÖÂÆπ: ${finalState.rootHasContent}`);
    console.log(`  - MoleculeÂ≠òÂú®: ${finalState.moleculeExists}`);
    console.log(`  - BodyÂ≠êÂÖÉÁ¥†: ${finalState.bodyChildrenCount}`);
    
    // ÂàÜÊûêÈóÆÈ¢ò
    if (!finalState.rootExists) {
      console.log('\n‚ùå ÈóÆÈ¢òËØäÊñ≠: RootÂÖÉÁ¥†‰∏çÂ≠òÂú®');
      console.log('üîß Âª∫ËÆÆ: Ê£ÄÊü•HTMLÁªìÊûÑÂíåReactÊ∏≤Êüì');
    } else if (!finalState.rootHasContent) {
      console.log('\n‚ùå ÈóÆÈ¢òËØäÊñ≠: RootÂÖÉÁ¥†‰∏∫Á©∫');
      console.log('üîß Âª∫ËÆÆ: Ê£ÄÊü•ReactÁªÑ‰ª∂Ê∏≤ÊüìÂíåJavaScriptÈîôËØØ');
    } else if (!finalState.moleculeExists) {
      console.log('\n‚ùå ÈóÆÈ¢òËØäÊñ≠: MoleculeÊ°ÜÊû∂Êú™Âä†ËΩΩ');
      console.log('üîß Âª∫ËÆÆ: Ê£ÄÊü•Molecule‰æùËµñÂíåÂàùÂßãÂåñ');
    } else {
      console.log('\n‚úÖ È°µÈù¢Áä∂ÊÄÅÊ≠£Â∏∏');
    }
    
    console.log('\nüéØ Â¶ÇÊûúÈóÆÈ¢òÊåÅÁª≠Â≠òÂú®ÔºåËØ∑:');
    console.log('1. Ê£ÄÊü•ÊµèËßàÂô®ÊéßÂà∂Âè∞ÈîôËØØ');
    console.log('2. Êü•ÁúãÁΩëÁªúËØ∑Ê±ÇÁä∂ÊÄÅ');
    console.log('3. Á°ÆËÆ§ÊâÄÊúâ‰æùËµñÈÉΩÂ∑≤Ê≠£Á°ÆÂÆâË£Ö');
    console.log('4. Â∞ùËØïÊ∏ÖÈô§ÁºìÂ≠òÂπ∂ÈáçÊñ∞ÂêØÂä®');
  }

  private async cleanup() {
    console.log('\nüßπ Ê∏ÖÁêÜËµÑÊ∫ê...');
    
    if (this.page) {
      await this.page.close();
      this.page = null;
    }
    
    if (this.browser) {
      await this.browser.close();
      this.browser = null;
    }
    
    console.log('‚úÖ ËµÑÊ∫êÊ∏ÖÁêÜÂÆåÊàê');
  }
}

// ËøêË°åÊµãËØïÁöÑÂáΩÊï∞
export async function runPuppeteerPluginTest() {
  const test = new PuppeteerPluginTest();
  await test.runPluginTest();
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§Êñá‰ª∂
if (require.main === module) {
  runPuppeteerPluginTest().catch(console.error);
}
